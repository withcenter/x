

[*] GIT INFORMATION
-------------------
	theme repository : https://github.com/x-theme/
	widget repository : https://github.com/x-widget/
	
	



	
[*] ORDER of TODO LIST
----------------------

	- 간단 설치로 등록된 소스의 config.xml 을 주기적으로 업데이트하는 코드를 만들어 필요하다면 크론으로 등록한다.
	

	- 간단 설치에서 자신이 등록한 소스를 목록하고 삭제하는 기능을 추가한다.
	
	- 관리자가 목록하고 삭제하는 기능을 추가한다.

	- 간단 설치에서 github.com 의 config.xml 을 읽어서 화면에 정보를 표시해 주기.

	
	- 모듈별, 테마별 언어 폴더 language/ 을 만들고, 그 안에서 설정된 언어 파일을  $language_code 에서 추가 적용하여 사용 할 수 있도록 한다.
		각 module init, theme init 에서 처리를 하도록 한다.
	
	- 쇼핑몰:
		-- 관리자 페이지에서 상품 등록 부터.
			x_data 의 필드를 mall 클래스에서 클래스 상수가 아닌, 실 상수로 등록해수 사용한다.
				예) MALL_ITEM_SUBJECT, MALL_ITEM_CONTENT,
			그리고 모두 캡슐화한다.
				예) 상품 정보 액세스
					mall_item( '상품번호 또는 상품 레코드' );
					mall_item_subject();
					mall_item_content();
					mall_item_date_registered( "date-format" );
					mall_item_date_updated( "date-format" );
					
					
					// 이미지 관련 함수는 x_data 테이블의 data_file_xxxx() 관련 함수로 사용되어진다.
					mall_item_image_reset();
					while ( mall_item_image_next() ) {
						mall_item_image_src();
						mall_item_image_path();
						mall_item_image_name();
						mall_item_image_type();
						mall_item_image_id(); //saved file name
					}
					
					
					
					mall_list( array('page'=>2) );
					while ( mall_item_next() ) {
						mall_subject();
						mall_content();
					}
					
					
				
			
		-- 국내 및 국제 쇼핑몰. 해외 판매. 페이팔 결재 필수.
		
	- x_data 테이블 : 다목적 정보 저장 테이블. 빠른 인덱싱 및 검색이 필요하다.
		
		idx,					-> primary key. index 용.
		first					-> first category.
		second			-> second category.
		third					-> third category
		
		int_1 ~ int_10
		chat_1 ~ chat_10
		varchar_1 ~ varchar_10
		text_1 ~ text_10
		
		
		
		x_data								-> 상품 정보. 상품에 대한 기본 정보(또는 검색되어야 할 정보)는 x_mall_item 에 저장. 기타 내용이나, 상세 정보는 x_data 에 저장.
		x_data								-> 상품 코멘트.
		x_data								-> 결재 모듈. 모듈에 독립적. 즉, 쇼핑몰, 강의수업료 뿐만아니라 여러가지 상황에서 결재를 할 수 있도록
			결재 신청, 장바구니, 취소, 환불 등의 정보가 기록되어져야 한다.
		x_config							-> 도메인 별 결재 모듈 정보 저장.
		x_data								-> 독립적 북마크 정보 저장. 게시글, 쇼핑몰 아이템, 각종 페이지 등 독립형 북마크이다.
		
		
		
		
		
		
		상품 페이지
		
		상품 사진, 상품 설명, 옵션(크기, 색상, 개수)
		
		바로결재, 장바구니, 북마크, 추천하기
		
		상품 페이지 서브메뉴
		상품정보 | 사용후기 | 배송정보 | 환불 및 교환정보 | 
		
		
		목록: 판매순, 가격순(높은 순, 낮은순), 평점순, 후기많은 순서, 최근등록순
		
		
		unit test 작업을 거칠 것. 기본 데이터(상품,코멘트 등) 입력, 데이터 무작위 입력, 무작위 결재 등.
		

	- simple update		=> 테스트를 더 하고 작업 종료한다.

	- widget 동작 재 확인
	
	- 위젯에서 HTML 입력시 Javascript 입력 못하게 할 것.
	
	- 배포 파일에 포함되지 않는 모든 THEME / WIDGET / MODULE 을 submodule 로 작업한다.
	
	- @다음버젼 widget/module/theme 을 x 에 등록시
		
		게시판에 글을 쓸 때, 프로젝트 주소만 입력하도록 한다.
		
			이미 등록이 되어져 있는 것은 포팅을 한다.
		
		config.xml 을 실시간으로 파싱해서 게시판에 보관할 것.
		
			이 때, 카테고리 값에 허용되지 않는 분류가 있는지, 카테고리: blog, portal, community, news
			
				서브 카테고리는 없애 버린다.
			
			버젼, 작성자 이름 등을 파싱해서 보기 좋게 해 준다.
			
		
		그래서 빠르게 보여 줄 수 있도록 할 것.
		
		단, 업데이트가 있는 때, 새로운 정보를 보여주고 싶다면 다시 게시판에 업데이트를 해야한다.
		
		하지만, 게시판에 다시 업데이트를 하지 않아도 새로운 정보가 사용자에게 다운로드가 된다.
		
		config.xml 의 값은 업데이트된 것이 보여지지 않지만,
		
		그 외의 미리보기 이미지 정보 등은 업데이트 된 것이 사용자에게 보여진다.
	
	
	
[*] To Doc
----------

	x_data 테이블
	
	int_1 ~ int_5 까지 인덱스가 걸려 있다.
	char_1 ~ char_5 까지 인덱스가 걸려 있다.
	varchar_1 ~ varchar_5 까지 인덱스가 걸려 있다.
	


	
	file_count 는 총 업로드된 파일의 갯 수
	file_count_upload	총 업로드된 회수. 이 값은 파일의 번호를 매기는데에만 사용된다. 예를 들어 1개의 파일을 업로드하면 이 값은 1이 된다. 그 파일을 삭제하고 새로운 파일을 업로드하면 이 값은 2가된다. 즉, 파일을 업로드 할 때마다 1 씩 증가시킨다.
		그래서 파일을 저장할 때, 고유한 값을 만들어 낼 수 있도록 한다.
	file_count_image 는 총 업로드된 이미지 파일의 갯 수.
	file_info 는 text 형 필드로서 업로드된 파일의 정보를 보관하고 있다.
		파일의 타입, 이름, 저장된 파일 이름(이 값은 ID 로 사용된다.), 크기 등의 정보를 scalar 형식으로 보관한다.
	
	실제 파일은 HDD 에 저장이되며, 파일 경로는 X_DATA_FOLDER 에 기록되며,
	
	파일 이름은 x_data.idx 와 file_count_upload 의 조합으로 이루어 진다.
	
	
	
	-----------------------------------
	
	data_xxxx() 관련 함수
	
					x::data( '번호 또는 레코드 또는 first, second, third 의 조합' );
					x::data_field();
					x::data_ip();
					x::data_stamp('create', 'data-form');
					x::data_stamp('update', 'data-form');
					
					....
					
					x::data_list( array('page'=>3) );			/// 3 페이지의 정보
					
					x::data_list_reset();
					while ( x::data_list_next() ) {
					}
					
					x::image_reset();
					while ( x::image_next() ) {
						x::image_src();
						x::image_path();
						x::image_name();
						x::image_type();
						x::image_id(); //saved file name
					}
					
					
					
					
		
	
	
