TODO LiST
-----------


	- 쇼핑몰.
	
		국내 및 국제 쇼핑몰. 해외 판매. 페이팔 결재 필수.
		
		x_data
		
		code, key, value
		
		int_1 ~ int_10
		chat_1 ~ chat_10
		varchar_1 ~ varchar_10
		text_1 ~ text_10
		
		
		x_mall_item
		x_mall_comment
		
		x_payment			-> 결재 모듈. 모듈에 독립적. 즉, 쇼핑몰, 수업료 뿐만아니라 여러가지 상황에서 결재를 할 수 있도록
		x_config				-> 도메인 별 결재 모듈 정보 저장.
		x_bookmark			-> 독립적 북마크 정보 저장. 게시글, 쇼핑몰 아이템, 각종 페이지 등 독립형 북마크이다.
		
		
		
		
		
		
		
		
		상품 페이지
		
		상품 사진, 상품 설명, 옵션(크기, 색상, 개수)
		
		바로결재, 장바구니, 북마크, 추천하기
		
		상품 페이지 서브메뉴
		상품정보 | 사용후기 | 배송정보 | 환불 및 교환정보 | 
		
		
		
		

	- simple update		=> 테스트를 더 하고 작업 종료한다.

	- widget 동작 재 확인
	
	- 위젯에서 HTML 입력시 Javascript 입력 못하게 할 것.
	
	- 배포 파일에 포함되지 않는 모든 THEME / WIDGET / MODULE 을 submodule 로 작업한다.
	
	- @다음버젼 widget/module/theme 을 x 에 등록시
		
		게시판에 글을 쓸 때, 프로젝트 주소만 입력하도록 한다.
		
			이미 등록이 되어져 있는 것은 포팅을 한다.
		
		config.xml 을 실시간으로 파싱해서 게시판에 보관할 것.
		
			이 때, 카테고리 값에 허용되지 않는 분류가 있는지, 카테고리: blog, portal, community, news
			
				서브 카테고리는 없애 버린다.
			
			버젼, 작성자 이름 등을 파싱해서 보기 좋게 해 준다.
			
		
		그래서 빠르게 보여 줄 수 있도록 할 것.
		
		단, 업데이트가 있는 때, 새로운 정보를 보여주고 싶다면 다시 게시판에 업데이트를 해야한다.
		
		하지만, 게시판에 다시 업데이트를 하지 않아도 새로운 정보가 사용자에게 다운로드가 된다.
		
		config.xml 의 값은 업데이트된 것이 보여지지 않지만,
		
		그 외의 미리보기 이미지 정보 등은 업데이트 된 것이 사용자에게 보여진다.
	
	
	
@widget test
-------
스킨변경				=> OK
팝업 크기 자동 조절		=> OK
게시판 설정				=> OK
CSS 지정				=> OK
첨부 파일 등록			=> OK
text + css + banner  widget		=> OK
최근글 위젯				=> OK
최근 코멘트 위젯		=> OK

To Doc
-------

위젯은

config.xml
config.php

가 있는데,

config.php 는 설정 페이지에서 자동으로 불려진다.
config.php 는 설정페이지에 HTML 폼을 추가로 보여주는 것과 설정페이지가 저장이 될 때, HTML 폼 값을 저장하는 역활을 한다.

if ( $submit ) {
	// 여기에 저장
}
else {
	// 여기에 HTML FORM 문장을 출력
}



사용하기 쉽게 미리 만들어진 HTML FORM 코드가 있다.

	include widget_config_form('title')				// 제목이 필요한 경우,
	
	
	
	// TEXT 입력이 필요한 경우,
	include widget_config_form('text', array(
			'name'				=> 'no',
			'caption'			=> ln('No.', '글 갯수'),
			'placeholder'	=> ln("Insert No of Posts", "출력할 글 개 수를 입력하세요.")
		)
	);

	
	// TEXTAREA 항목이 필요한 경우,... 아래는  CSS 입력.
	include widget_config_form('textarea', array(
		'name'				=> 'css',
		'caption'			=> ln('STYLE', '스타일') . " ( CSS )",
	));
	
	
	
	// CheckBox 입력이 필요한 경우,
	include widget_config_form('checkbox', array(
			'name'				=> 'target',
			'caption'			=> ln('New Window', '새 창'),
			'comment'		=> ln('Open in New Tab', '새 창으로 열기'),
		)
	);
	
	
	// 게시판 아이디 입력이 필요한 경우,
		
		include widget_config_form('forum');			// 1개 게시판 입력. 게시판 아이디는 $widget_config['forum1'] 키 값에 저장됨.
		
		include widget_config_form('forum', array('no'=>'3')); // 3개 게시판 입력. 게시판 아이디는 $widget_config['form1'], 'forum2', 'forum3' 에 각각 저장됨.

		include widget_config_form('forum', array( 'from' => 2, 'to'=>5) );		// 게시판 아이디 'forum2' 부터 'forum5' 까지 입력을 받는다.
		

@팁 : 추가적인 설명이 필요한 경우,
----------------------------------------------------------------------------

아래와 같이 부가 설명을 출력해 주면 된다.

<?php

	include widget_config_form('textarea', array(
		'name'				=> 'html',
		'caption'			=> 'HTML',
	));
	echo ln("Use &lt;style&gt; tag to input style (css)", "&lt;style&gt; 태그를 사용해서 CSS 를 입력 할 수 있습니다.") . '<br>';
	
?>
		
	
@예제

----------------------------------------------------------------------------
<?php
	include widget_config_form('title');
	include widget_config_form('text', 'no', ln('No.', '글 갯수'), ln("Insert No of Posts", "출력할 글 개 수를 입력하세요."));
	widget_config_extra_begin();
	echo "<div><span class='caption'>My Name</span> : <input type='text' name='my_name' value='$widget_config[my_name]'></div>";
	include widget_config_form('css');
	widget_config_extra_end();
?>
<style>
	input[type='text'] {
		width: 60%;
	}
</style>

-----------------------------------------------------------------------------


위 예제에서
	
	widget_config_extra_begin();
	....
	widget_config_extra_end();

에서 보듯이 추가 설정으로 보여 줄 것은 widget_config_extra_begin() 과 widget_config_extra_end() 사이에 두면 된다.

그리고 직접 HTML FORM 문장을 작성 할 수 있는데, 가능한 한 미리 작성된 HTML FORM 코드를 활용 하도록 한다.





@ 디자인


만약 디자인적인 변화가 필요하다면 가능한 한 config.php 에 style 태그를 추가하여 CSS 로 설정을 한다.




@ 기본 설정

기본 값 지정이나 기본 코드의 실행은

config.php 또는 해당 위젯 스크립트에서 하면 됩니다.


-------------------------------------------------------------------------------------------


to doc
------
default.js 에서 윈도우 크기가 조정이 되면 0.5 초 후에 콜백을 호출 한다.
아래의 코드에서 보듯이 0.5 초 단위로 끊어서 이벤트를 발생시킨다.


	var timer_resize = 0;
	$(window).resize( function() {
		if ( timer_resize ) clearTimeout( timer_resize );
		if ( typeof callback_window_resize == 'function' ) timer_resize = setTimeout( callback_window_resize, 500 );
	} );

아래와 같이 콜백 함수를 작성하면 된다.
<script>
function callback_window_resize()
{
	alert('resized ...');
}
</script>


-----------------------

실전 예:

popup_layer() 함수에서 팝업 내의 iframe 의 높이에 따라서 팝업 레이어 크기가 같이 변경이 되게 하는 방법

우선 윈도우즈(팝업 내의 iframe)의 크기가 변경이 되면, 상위 부모(레이어 팝업)으로 message 를 보낸다.
이 때, 메세지 내용은 'code': popup_layer_resize, 'height': 실제 iframe 높이 이다.
iframe 의 높이는 적절하게 변경이 되어야 하므로 아래와 같이 시간차를 두고 호출한다.
+40 은 기타 공간을 약간 포함한 것이다.

예를 들면 widget 관리자 페이지를 예로 들면,


1) module/widget/update.js 에 아래와 같이 기록되어져 있다.
---------------------------------------------------

	$('.widget-extra-button').click(function(){
		// ...
		resize_popup_layer();
	}
	window.onload = resize_popup_layer;
	function resize_popup_layer()
	{
		setTimeout( post_message_height, 300 );
		setTimeout( post_message_height, 1500 );
		setTimeout( post_message_height, 3500 );
	}
	function post_message_height()
	{
		var height = $('body').height() + 40 ;
		var data = { 'code' : 'popup_layer_resize', 'height' : height };
		parent.postMessage( data, '*' );
	}
--------------------------------------------------------

이것은 맨 처음 팝업 화면이 떴을 때와 추가 설정 버튼을 클릭할 때마다 새로운 iframe 의 크기를 부모 창으로 메세지를 보내는 것이다.


2) popup_layer() 함수로 팝업을 띄운 윈도우(부모)에서 받아서 처리를 하는 부분은 default.js 에 들어 있다.

window.addEventListener('message', message_receiver, false);
function message_receiver( e )
{
	if ( e.data.code == 'popup_layer_resize' ) {
		$('.layer_popup').css('height', e.data.height + 'px' );
		trace("popup_layer_resize: " + e.data.height + 'px');
	}
}







to doc
---------------------
파일 업로드. 아래와 같이 하면 된다.


	include widget_config_form( 'file', array(
		'name'				=> 'icon',
		'caption'			=> ln('Icon', '아이콘'),
	) );
	
	include widget_config_form( 'file', array(
		'name'				=> 'icon2',
		'caption'			=> ln('Second Icon', '두번째 아이콘'),
	) );
	
	
@doc 가상 선택자.
-------------------------------------------------------------

현재 위젯의 고유 ID 나 CLASS 명을 몰라서 코딩이 어려울 때가 있다.

이럴 때, ".this" 를 사용해서 현재 위젯을 선택(지정 또는 표현) 할 수 있다.

이것은 HTML 이나 CSS 등에서 사용가능한 것으로 .this 를 통해서 보다 쉽게 스타일링을 할 수 있다.

주의 할 것은 설정 FORM 의 변수명이 css 와 html 만 된다.



예제) CSS 입력에서
---------------------------------------------------------------
[code='side-post-latest'] a { color: red !important }

예제) HTML 에서 <style> 태그를 같이 사용하는 경우,
---------------------------------------------------------------
<style>
.this {
margin-bottom:1em;
}
.this img {
width:100%;
}
</style>


결과) 위와 같이 하면 실제로는 아래와 같이 웹 브라우저에 출력된다.
---------------------------------------------------------------

<style>
[code='side-post-latest'] a { color: red !important }</style>

또는
<style>
[code='side-sample-4'] {
margin-bottom:1em;
}
[code='side-sample-4'] img {
width:100%;
}
</style>


@예제 위젯
----------------------------------------------------------------

none
post-lastest
post-comment-latest
html_banner


@기타 사용하기 쉽도록 캡슐화 해 놓은 것.
-----------------------------------------------------------------
	include widget_config_form('banner');
	include widget_config_form('url');
	include widget_config_form('target');
	include widget_config_form('html');
	
	include widget_config_form('css');


	
	
	