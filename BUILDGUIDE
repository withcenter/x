

[*] GIT INFORMATION
-------------------
	theme repository : https://github.com/x-theme/
	widget repository : https://github.com/x-widget/
	
	



TODO LiST
-----------


	- 쇼핑몰.
	
		국내 및 국제 쇼핑몰. 해외 판매. 페이팔 결재 필수.
		
	- x_data 테이블 : 다목적 정보 저장 테이블. 빠른 인덱싱 및 검색이 필요하다.
		
		idx,					-> primary key. index 용.
		first					-> first category.
		second			-> second category.
		third					-> third category
		
		int_1 ~ int_10
		chat_1 ~ chat_10
		varchar_1 ~ varchar_10
		text_1 ~ text_10
		
		
		
		x_mall_item, x_data			-> 상품 정보. 상품에 대한 기본 정보(또는 검색되어야 할 정보)는 x_mall_item 에 저장. 기타 내용이나, 상세 정보는 x_data 에 저장.
		x_data							-> 상품 코멘트.
		x_payment					-> 결재 모듈. 모듈에 독립적. 즉, 쇼핑몰, 강의수업료 뿐만아니라 여러가지 상황에서 결재를 할 수 있도록
			결재 신청, 장바구니, 취소, 환불 등의 정보가 기록되어져야 한다.
		x_config						-> 도메인 별 결재 모듈 정보 저장.
		x_bookmark					-> 독립적 북마크 정보 저장. 게시글, 쇼핑몰 아이템, 각종 페이지 등 독립형 북마크이다.
		
		
		
		
		상품 페이지
		
		상품 사진, 상품 설명, 옵션(크기, 색상, 개수)
		
		바로결재, 장바구니, 북마크, 추천하기
		
		상품 페이지 서브메뉴
		상품정보 | 사용후기 | 배송정보 | 환불 및 교환정보 | 
		
		
		목록: 판매순, 가격순(높은 순, 낮은순), 평점순, 후기많은 순서, 최근등록순
		
		
		unit test 작업을 거칠 것. 기본 데이터(상품,코멘트 등) 입력, 데이터 무작위 입력, 무작위 결재 등.
		

	- simple update		=> 테스트를 더 하고 작업 종료한다.

	- widget 동작 재 확인
	
	- 위젯에서 HTML 입력시 Javascript 입력 못하게 할 것.
	
	- 배포 파일에 포함되지 않는 모든 THEME / WIDGET / MODULE 을 submodule 로 작업한다.
	
	- @다음버젼 widget/module/theme 을 x 에 등록시
		
		게시판에 글을 쓸 때, 프로젝트 주소만 입력하도록 한다.
		
			이미 등록이 되어져 있는 것은 포팅을 한다.
		
		config.xml 을 실시간으로 파싱해서 게시판에 보관할 것.
		
			이 때, 카테고리 값에 허용되지 않는 분류가 있는지, 카테고리: blog, portal, community, news
			
				서브 카테고리는 없애 버린다.
			
			버젼, 작성자 이름 등을 파싱해서 보기 좋게 해 준다.
			
		
		그래서 빠르게 보여 줄 수 있도록 할 것.
		
		단, 업데이트가 있는 때, 새로운 정보를 보여주고 싶다면 다시 게시판에 업데이트를 해야한다.
		
		하지만, 게시판에 다시 업데이트를 하지 않아도 새로운 정보가 사용자에게 다운로드가 된다.
		
		config.xml 의 값은 업데이트된 것이 보여지지 않지만,
		
		그 외의 미리보기 이미지 정보 등은 업데이트 된 것이 사용자에게 보여진다.
	
	
	
@widget test
-------
스킨변경				=> OK
팝업 크기 자동 조절		=> OK
게시판 설정				=> OK
CSS 지정				=> OK
첨부 파일 등록			=> OK
text + css + banner  widget		=> OK
최근글 위젯				=> OK
최근 코멘트 위젯		=> OK


to doc
------
default.js 에서 윈도우 크기가 조정이 되면 0.5 초 후에 콜백을 호출 한다.
아래의 코드에서 보듯이 0.5 초 단위로 끊어서 이벤트를 발생시킨다.


	var timer_resize = 0;
	$(window).resize( function() {
		if ( timer_resize ) clearTimeout( timer_resize );
		if ( typeof callback_window_resize == 'function' ) timer_resize = setTimeout( callback_window_resize, 500 );
	} );

아래와 같이 콜백 함수를 작성하면 된다.
<script>
function callback_window_resize()
{
	alert('resized ...');
}
</script>


-----------------------

실전 예:

popup_layer() 함수에서 팝업 내의 iframe 의 높이에 따라서 팝업 레이어 크기가 같이 변경이 되게 하는 방법

우선 윈도우즈(팝업 내의 iframe)의 크기가 변경이 되면, 상위 부모(레이어 팝업)으로 message 를 보낸다.
이 때, 메세지 내용은 'code': popup_layer_resize, 'height': 실제 iframe 높이 이다.
iframe 의 높이는 적절하게 변경이 되어야 하므로 아래와 같이 시간차를 두고 호출한다.
+40 은 기타 공간을 약간 포함한 것이다.

예를 들면 widget 관리자 페이지를 예로 들면,


1) module/widget/update.js 에 아래와 같이 기록되어져 있다.
---------------------------------------------------

	$('.widget-extra-button').click(function(){
		// ...
		resize_popup_layer();
	}
	window.onload = resize_popup_layer;
	function resize_popup_layer()
	{
		setTimeout( post_message_height, 300 );
		setTimeout( post_message_height, 1500 );
		setTimeout( post_message_height, 3500 );
	}
	function post_message_height()
	{
		var height = $('body').height() + 40 ;
		var data = { 'code' : 'popup_layer_resize', 'height' : height };
		parent.postMessage( data, '*' );
	}
--------------------------------------------------------

이것은 맨 처음 팝업 화면이 떴을 때와 추가 설정 버튼을 클릭할 때마다 새로운 iframe 의 크기를 부모 창으로 메세지를 보내는 것이다.


2) popup_layer() 함수로 팝업을 띄운 윈도우(부모)에서 받아서 처리를 하는 부분은 default.js 에 들어 있다.

window.addEventListener('message', message_receiver, false);
function message_receiver( e )
{
	if ( e.data.code == 'popup_layer_resize' ) {
		$('.layer_popup').css('height', e.data.height + 'px' );
		trace("popup_layer_resize: " + e.data.height + 'px');
	}
}





	
